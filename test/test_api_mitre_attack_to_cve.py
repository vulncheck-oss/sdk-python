# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.api_mitre_attack_to_cve import ApiMitreAttackToCVE

class TestApiMitreAttackToCVE(unittest.TestCase):
    """ApiMitreAttackToCVE unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiMitreAttackToCVE:
        """Test ApiMitreAttackToCVE
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiMitreAttackToCVE`
        """
        model = ApiMitreAttackToCVE()
        if include_optional:
            return ApiMitreAttackToCVE(
                cve_list = [
                    ''
                    ],
                date_added = '',
                technique_id = vulncheck_sdk.models.api/mitre_attack_tech.api.MitreAttackTech(
                    detections = [
                        vulncheck_sdk.models.api/mitre_detection_tech.api.MitreDetectionTech(
                            dastacomponent = '', 
                            datasource = '', 
                            detects = '', 
                            id = '', )
                        ], 
                    domain = '', 
                    id = '', 
                    mitigations = [
                        vulncheck_sdk.models.api/mitre_mitigation_tech.api.MitreMitigationTech(
                            description = '', 
                            id = '', 
                            mitigation_url = '', )
                        ], 
                    name = '', 
                    subtechnique = True, 
                    tactics = [
                        ''
                        ], 
                    url = '', )
            )
        else:
            return ApiMitreAttackToCVE(
        )
        """

    def testApiMitreAttackToCVE(self):
        """Test ApiMitreAttackToCVE"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

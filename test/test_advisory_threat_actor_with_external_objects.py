# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_threat_actor_with_external_objects import AdvisoryThreatActorWithExternalObjects

class TestAdvisoryThreatActorWithExternalObjects(unittest.TestCase):
    """AdvisoryThreatActorWithExternalObjects unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryThreatActorWithExternalObjects:
        """Test AdvisoryThreatActorWithExternalObjects
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryThreatActorWithExternalObjects`
        """
        model = AdvisoryThreatActorWithExternalObjects()
        if include_optional:
            return AdvisoryThreatActorWithExternalObjects(
                country = '',
                cve_references = [
                    vulncheck_sdk.models.advisory/cve_reference.advisory.CVEReference(
                        cve = [
                            ''
                            ], 
                        date_added = '', 
                        url = '', )
                    ],
                date_added = '',
                malpedia_url = '',
                misp_id = '',
                misp_threat_actor = vulncheck_sdk.models.advisory/misp_value_no_id.advisory.MISPValueNoID(
                    description = '', 
                    meta = vulncheck_sdk.models.advisory/misp_meta.advisory.MispMeta(
                        attribution_confidence = '', 
                        cfr_suspected_state_sponsor = '', 
                        cfr_suspected_victims = [
                            ''
                            ], 
                        cfr_target_category = [
                            ''
                            ], 
                        cfr_type_of_incident = [
                            ''
                            ], 
                        country = '', 
                        refs = [
                            ''
                            ], 
                        synonyms = [
                            ''
                            ], ), 
                    related = [
                        vulncheck_sdk.models.advisory/misp_related_item.advisory.MispRelatedItem(
                            dest_uuid = '', 
                            tags = [
                                ''
                                ], 
                            type = '', )
                        ], 
                    value = '', ),
                mitre_attack_group = vulncheck_sdk.models.advisory/mitre_attack_group_no_id.advisory.MITREAttackGroupNoID(
                    aliases = [
                        ''
                        ], 
                    description = '', 
                    name = '', 
                    techniques = [
                        vulncheck_sdk.models.advisory/mitre_attack_technique.advisory.MitreAttackTechnique(
                            sub_technique = '', 
                            sub_technique_name = '', 
                            tactic = [
                                ''
                                ], 
                            technique_id = '', 
                            technique_name = '', )
                        ], ),
                mitre_group_cti = vulncheck_sdk.models.advisory/mitre_group_cti.advisory.MitreGroupCTI(
                    aliases = [
                        ''
                        ], 
                    description = '', 
                    id = '', 
                    references = [
                        vulncheck_sdk.models.advisory/external_references.advisory.ExternalReferences(
                            description = '', 
                            external_id = '', 
                            source_name = '', 
                            url = '', )
                        ], ),
                mitre_id = '',
                threat_actor_name = '',
                tools = [
                    vulncheck_sdk.models.advisory/tool.advisory.Tool(
                        name = '', 
                        references = [
                            vulncheck_sdk.models.advisory/tool_ref.advisory.ToolRef(
                                date_added = '', 
                                url = '', )
                            ], )
                    ],
                vendor_names_for_threat_actors = [
                    vulncheck_sdk.models.advisory/vendor_name_for_threat_actor.advisory.VendorNameForThreatActor(
                        threat_actor_name = '', 
                        url = '', 
                        vendor_name = '', )
                    ]
            )
        else:
            return AdvisoryThreatActorWithExternalObjects(
        )
        """

    def testAdvisoryThreatActorWithExternalObjects(self):
        """Test AdvisoryThreatActorWithExternalObjects"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

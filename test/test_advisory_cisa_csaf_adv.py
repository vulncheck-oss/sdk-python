# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_cisa_csaf_adv import AdvisoryCisaCsafAdv

class TestAdvisoryCisaCsafAdv(unittest.TestCase):
    """AdvisoryCisaCsafAdv unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryCisaCsafAdv:
        """Test AdvisoryCisaCsafAdv
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryCisaCsafAdv`
        """
        model = AdvisoryCisaCsafAdv()
        if include_optional:
            return AdvisoryCisaCsafAdv(
                csaf_json = vulncheck_sdk.models.advisory/csaf.advisory.CSAF(
                    document = vulncheck_sdk.models.document.document(), 
                    notes = [
                        vulncheck_sdk.models.advisory/csaf_note.advisory.CSAFNote(
                            audience = '', 
                            category = '', 
                            text = '', 
                            title = '', )
                        ], 
                    product_tree = vulncheck_sdk.models.product_tree.product_tree(), 
                    vulnerabilities = [
                        vulncheck_sdk.models.advisory/csaf_vulnerability.advisory.CSAFVulnerability(
                            cve = '', 
                            cwe = vulncheck_sdk.models.advisory/cwe.advisory.Cwe(
                                id = '', 
                                name = '', ), 
                            flags = [
                                vulncheck_sdk.models.advisory/flag.advisory.Flag(
                                    date = '', 
                                    group_ids = [
                                        ''
                                        ], 
                                    label = '', 
                                    product_ids = [
                                        ''
                                        ], )
                                ], 
                            ids = [
                                vulncheck_sdk.models.advisory/tracking_id.advisory.TrackingID(
                                    system_name = '', 
                                    text = '', )
                                ], 
                            product_status = {
                                'key' : [
                                    ''
                                    ]
                                }, 
                            references = [
                                vulncheck_sdk.models.advisory/csaf_reference.advisory.CSAFReference(
                                    category = '', 
                                    summary = '', 
                                    url = '', )
                                ], 
                            release_date = '', 
                            remediations = [
                                vulncheck_sdk.models.advisory/remediation_data.advisory.RemediationData(
                                    category = '', 
                                    date = '', 
                                    details = '', 
                                    entitlements = [
                                        ''
                                        ], 
                                    restart_required = vulncheck_sdk.models.advisory/restart_data.advisory.RestartData(
                                        category = '', 
                                        details = '', ), )
                                ], 
                            scores = [
                                vulncheck_sdk.models.advisory/csaf_score.advisory.CSAFScore(
                                    cvss_v2 = vulncheck_sdk.models.advisory/cvssv2.advisory.CVSSV2(
                                        access_complexity = '', 
                                        access_vector = '', 
                                        authentication = '', 
                                        availability_impact = '', 
                                        availability_requirement = '', 
                                        base_score = 1.337, 
                                        collateral_damage_potential = '', 
                                        confidentiality_impact = '', 
                                        confidentiality_requirement = '', 
                                        environmental_score = 1.337, 
                                        exploitability = '', 
                                        integrity_impact = '', 
                                        integrity_requirement = '', 
                                        remediation_level = '', 
                                        report_confidence = '', 
                                        target_distribution = '', 
                                        temporal_score = 1.337, ), 
                                    cvss_v3 = vulncheck_sdk.models.advisory/cvssv3.advisory.CVSSV3(
                                        attack_complexity = '', 
                                        attack_vector = '', 
                                        availability_impact = '', 
                                        base_score = 1.337, 
                                        base_severity = '', 
                                        confidentiality_impact = '', 
                                        integrity_impact = '', 
                                        privileges_required = '', 
                                        scope = '', 
                                        user_interaction = '', 
                                        vector_string = '', 
                                        version = '', ), 
                                    products = [
                                        ''
                                        ], )
                                ], 
                            threats = [
                                vulncheck_sdk.models.advisory/threat_data.advisory.ThreatData(
                                    category = '', 
                                    details = '', )
                                ], )
                        ], ),
                cve = [
                    ''
                    ],
                date_added = '',
                id = '',
                references = [
                    ''
                    ],
                summary = '',
                title = '',
                updated_at = '',
                url = ''
            )
        else:
            return AdvisoryCisaCsafAdv(
        )
        """

    def testAdvisoryCisaCsafAdv(self):
        """Test AdvisoryCisaCsafAdv"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.api_exploit_v3_result import ApiExploitV3Result

class TestApiExploitV3Result(unittest.TestCase):
    """ApiExploitV3Result unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ApiExploitV3Result:
        """Test ApiExploitV3Result
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ApiExploitV3Result`
        """
        model = ApiExploitV3Result()
        if include_optional:
            return ApiExploitV3Result(
                timestamp = '',
                commercial_exploit_found = True,
                counts = vulncheck_sdk.models.api/exploits_v3_count.api.ExploitsV3Count(
                    botnets = 56, 
                    exploits = 56, 
                    ransomware_families = 56, 
                    threat_actors = 56, ),
                date_added = '',
                epss = vulncheck_sdk.models.api/epss.api.EPSS(
                    epss_percentile = 1.337, 
                    epss_score = 1.337, 
                    last_modified = '', ),
                exploits = [
                    vulncheck_sdk.models.api/normalized_exploit_v3_entry.api.NormalizedExploitV3Entry(
                        clone_ssh_url = '', 
                        clone_ssh_url_cached = '', 
                        date_added = '', 
                        exploit_availability = '', 
                        exploit_maturity = '', 
                        exploit_type = '', 
                        name = '', 
                        reference_url = '', 
                        refsource = '', 
                        repo_id = '', 
                        url = '', )
                    ],
                id = '',
                in_kev = True,
                in_vckev = True,
                max_exploit_maturity = '',
                public_exploit_found = True,
                reported_exploitation = [
                    vulncheck_sdk.models.api/normalized_report_v3_entry.api.NormalizedReportV3Entry(
                        date_added = '', 
                        name = '', 
                        refsource = '', 
                        url = '', )
                    ],
                reported_exploited = True,
                reported_exploited_by_botnets = True,
                reported_exploited_by_honeypot_service = True,
                reported_exploited_by_ransomware = True,
                reported_exploited_by_threat_actors = True,
                timeline = vulncheck_sdk.models.api/exploits_v3_timeline.api.ExploitsV3Timeline(
                    cisa_kev_date_added = '', 
                    cisa_kev_date_due = '', 
                    first_exploit_published = '', 
                    first_exploit_published_weaponized_or_higher = '', 
                    first_reported_botnet = '', 
                    first_reported_ransomware = '', 
                    first_reported_threat_actor = '', 
                    most_recent_exploit_published = '', 
                    most_recent_reported_botnet = '', 
                    most_recent_reported_ransomware = '', 
                    most_recent_reported_threat_actor = '', 
                    nvd_last_modified = '', 
                    nvd_published = '', 
                    vulncheck_kev_date_added = '', 
                    vulncheck_kev_date_due = '', ),
                trending = vulncheck_sdk.models.api/exploits_trending.api.ExploitsTrending(
                    github = True, ),
                weaponized_exploit_found = True
            )
        else:
            return ApiExploitV3Result(
        )
        """

    def testApiExploitV3Result(self):
        """Test ApiExploitV3Result"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_botnet import AdvisoryBotnet

class TestAdvisoryBotnet(unittest.TestCase):
    """AdvisoryBotnet unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryBotnet:
        """Test AdvisoryBotnet
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryBotnet`
        """
        model = AdvisoryBotnet()
        if include_optional:
            return AdvisoryBotnet(
                botnet_name = '',
                cve = [
                    ''
                    ],
                cve_references = [
                    vulncheck_sdk.models.advisory/cve_reference.advisory.CVEReference(
                        cve = [
                            ''
                            ], 
                        date_added = '', 
                        url = '', )
                    ],
                date_added = '',
                malpedia_url = '',
                tools = [
                    vulncheck_sdk.models.advisory/tool.advisory.Tool(
                        name = '', 
                        references = [
                            vulncheck_sdk.models.advisory/tool_ref.advisory.ToolRef(
                                date_added = '', 
                                url = '', )
                            ], )
                    ]
            )
        else:
            return AdvisoryBotnet(
        )
        """

    def testAdvisoryBotnet(self):
        """Test AdvisoryBotnet"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

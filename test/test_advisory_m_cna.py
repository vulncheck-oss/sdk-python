# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.advisory_m_cna import AdvisoryMCna

class TestAdvisoryMCna(unittest.TestCase):
    """AdvisoryMCna unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> AdvisoryMCna:
        """Test AdvisoryMCna
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `AdvisoryMCna`
        """
        model = AdvisoryMCna()
        if include_optional:
            return AdvisoryMCna(
                affected = [
                    vulncheck_sdk.models.advisory/m_affected.advisory.MAffected(
                        cpes = [
                            ''
                            ], 
                        platforms = [
                            ''
                            ], 
                        product = '', 
                        vendor = '', 
                        versions = [
                            vulncheck_sdk.models.advisory/m_version.advisory.MVersion(
                                less_than = '', 
                                less_than_or_equal = '', 
                                status = '', 
                                version = '', 
                                version_type = '', )
                            ], )
                    ],
                credits = [
                    vulncheck_sdk.models.advisory/credit.advisory.Credit(
                        lang = '', 
                        type = '', 
                        value = '', )
                    ],
                descriptions = [
                    vulncheck_sdk.models.advisory/m_descriptions.advisory.MDescriptions(
                        lang = '', 
                        value = '', )
                    ],
                impacts = [
                    vulncheck_sdk.models.advisory/impact.advisory.Impact(
                        capec_id = '', 
                        descriptions = [
                            vulncheck_sdk.models.advisory/m_descriptions.advisory.MDescriptions(
                                lang = '', 
                                value = '', )
                            ], )
                    ],
                metrics = [
                    vulncheck_sdk.models.advisory/metric.advisory.Metric(
                        cvss_v2_0 = vulncheck_sdk.models.advisory/m_cvss_v20.advisory.MCvssV20(
                            base_score = 1.337, 
                            vector_string = '', 
                            version = '', ), 
                        cvss_v3_0 = vulncheck_sdk.models.advisory/m_cvss_v30.advisory.MCvssV30(
                            base_score = 1.337, 
                            base_severity = '', 
                            vector_string = '', 
                            version = '', ), 
                        cvss_v3_1 = vulncheck_sdk.models.advisory/m_cvss_v31.advisory.MCvssV31(
                            base_score = 1.337, 
                            base_severity = '', 
                            vector_string = '', 
                            version = '', ), 
                        cvss_v4_0 = vulncheck_sdk.models.advisory/m_cvss_v40.advisory.MCvssV40(
                            base_score = 1.337, 
                            vector_string = '', 
                            version = '', ), 
                        format = '', 
                        other = vulncheck_sdk.models.advisory/metrics_other.advisory.MetricsOther(
                            content = '', 
                            type = '', ), )
                    ],
                problem_types = [
                    vulncheck_sdk.models.advisory/m_problem_types.advisory.MProblemTypes(
                        descriptions = [
                            vulncheck_sdk.models.advisory/ptm_descriptions.advisory.PTMDescriptions(
                                cwe_id = '', 
                                description = '', 
                                lang = '', 
                                type = '', )
                            ], )
                    ],
                provider_metadata = vulncheck_sdk.models.advisory/m_provider_metadata.advisory.MProviderMetadata(
                    date_updated = '', 
                    org_id = '', 
                    short_name = '', ),
                references = [
                    vulncheck_sdk.models.advisory/m_reference.advisory.MReference(
                        name = '', 
                        tags = [
                            ''
                            ], 
                        url = '', )
                    ],
                tags = [
                    ''
                    ],
                timeline = [
                    vulncheck_sdk.models.advisory/timeline.advisory.Timeline(
                        lang = '', 
                        time = '', 
                        value = '', )
                    ],
                title = ''
            )
        else:
            return AdvisoryMCna(
        )
        """

    def testAdvisoryMCna(self):
        """Test AdvisoryMCna"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

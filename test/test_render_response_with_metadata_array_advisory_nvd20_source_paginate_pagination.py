# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from vulncheck_sdk.models.render_response_with_metadata_array_advisory_nvd20_source_paginate_pagination import RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination

class TestRenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination(unittest.TestCase):
    """RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination:
        """Test RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination`
        """
        model = RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination()
        if include_optional:
            return RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination(
                benchmark = 1.337,
                meta = vulncheck_sdk.models.paginate/pagination.paginate.Pagination(
                    cursor = '', 
                    first_item = 56, 
                    index = '', 
                    last_item = 56, 
                    limit = 56, 
                    matches = [
                        vulncheck_sdk.models.paginate/match.paginate.Match(
                            field = '', 
                            value = '', )
                        ], 
                    max_pages = 56, 
                    next_cursor = '', 
                    opensearch_query = vulncheck_sdk.models.opensearch_query.opensearch_query(), 
                    order = '', 
                    page = 56, 
                    pages = [
                        ''
                        ], 
                    parameters = [
                        vulncheck_sdk.models.paginate/param.paginate.Param(
                            filtering = '', 
                            format = '', 
                            name = '', )
                        ], 
                    show_pages = True, 
                    show_query = True, 
                    sort = '', 
                    timestamp = '', 
                    total_documents = 56, 
                    total_pages = 56, 
                    warnings = [
                        ''
                        ], ),
                data = [
                    vulncheck_sdk.models.advisory/nvd20_source.advisory.NVD20Source(
                        contact_email = '', 
                        created = '', 
                        cwe_acceptance_level = vulncheck_sdk.models.advisory/cwe_acceptance_level.advisory.CweAcceptanceLevel(
                            description = '', 
                            last_modified = '', ), 
                        last_modified = '', 
                        name = '', 
                        source_identifiers = [
                            ''
                            ], 
                        v3_acceptance_level = vulncheck_sdk.models.advisory/v3_acceptance_level.advisory.V3AcceptanceLevel(
                            description = '', 
                            last_modified = '', ), )
                    ]
            )
        else:
            return RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination(
        )
        """

    def testRenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination(self):
        """Test RenderResponseWithMetadataArrayAdvisoryNVD20SourcePaginatePagination"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

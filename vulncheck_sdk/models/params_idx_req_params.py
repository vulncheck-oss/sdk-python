# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ParamsIdxReqParams(BaseModel):
    """
    model representing the parameters to constrain the vulnerability search
    """ # noqa: E501
    alias: Optional[StrictStr] = Field(default=None, description="Specify an Alias to search with")
    asn: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Specify an ASN to search with")
    botnet_name: Optional[StrictStr] = Field(default=None, description="Specify a Botnet Name to search with", alias="botnetName")
    cidr: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Specify a IPv4 or IPv6 cidr to search with")
    country: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Specify a country name to search with")
    country_code: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Specify a country code to search with", alias="countryCode")
    cve: Optional[StrictStr] = Field(default=None, description="Specify one or more CVEs (comma delimited) to search with.")
    hostname: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Specify a string to search in the list of hostnames")
    iava: Optional[StrictStr] = Field(default=None, description="Specify an IAVA to search with")
    ilvn: Optional[StrictStr] = Field(default=None, description="Specify a ILVN ID to search with")
    jvndb: Optional[StrictStr] = Field(default=None, description="Specify a JVNDB ID to search with")
    limit: Optional[StrictStr] = Field(default=None, description="Limit the number of documents returned")
    matches: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Specify a string to search in the matches field")
    misp_id: Optional[StrictStr] = Field(default=None, description="Specify a MISP ID to search with", alias="mispId")
    mitre_id: Optional[StrictStr] = Field(default=None, description="Specify a MITRE ID to search with", alias="mitreId")
    order: Optional[StrictStr] = Field(default=None, description="Return results in ascending or descending order")
    published: Optional[StrictStr] = Field(default=None, description="Specify a published date to search with")
    published_end: Optional[StrictStr] = Field(default=None, description="Specify an ending published date to filter with", alias="publishedEnd")
    published_start: Optional[StrictStr] = Field(default=None, description="Specify a starting published date to filter with", alias="publishedStart")
    ransomware_family_name: Optional[StrictStr] = Field(default=None, description="Specify a Ransomware Family Name to search with", alias="ransomwareFamilyName")
    sort: Optional[StrictStr] = Field(default=None, description="Return results sorted by field")
    threat_actor_name: Optional[StrictStr] = Field(default=None, description="Specify a Threat Actor Name to search with", alias="threatActorName")
    type_id: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Choices are c2 or initial-access", alias="typeId")
    type_kind: Optional[StrictStr] = Field(default=None, description="IpIntel Only: Filter results by 'type.kind'", alias="typeKind")
    updated_end: Optional[StrictStr] = Field(default=None, description="Specify an ending last modified date to filter with", alias="updatedEnd")
    updated_start: Optional[StrictStr] = Field(default=None, description="Specify a starting last modified date to filter with", alias="updatedStart")
    __properties: ClassVar[List[str]] = ["alias", "asn", "botnetName", "cidr", "country", "countryCode", "cve", "hostname", "iava", "ilvn", "jvndb", "limit", "matches", "mispId", "mitreId", "order", "published", "publishedEnd", "publishedStart", "ransomwareFamilyName", "sort", "threatActorName", "typeId", "typeKind", "updatedEnd", "updatedStart"]

    @field_validator('order')
    def order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['asc', 'desc']):
            raise ValueError("must be one of enum values ('asc', 'desc')")
        return value

    @field_validator('sort')
    def sort_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['_timestamp', 'date_added']):
            raise ValueError("must be one of enum values ('_timestamp', 'date_added')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ParamsIdxReqParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ParamsIdxReqParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alias": obj.get("alias"),
            "asn": obj.get("asn"),
            "botnetName": obj.get("botnetName"),
            "cidr": obj.get("cidr"),
            "country": obj.get("country"),
            "countryCode": obj.get("countryCode"),
            "cve": obj.get("cve"),
            "hostname": obj.get("hostname"),
            "iava": obj.get("iava"),
            "ilvn": obj.get("ilvn"),
            "jvndb": obj.get("jvndb"),
            "limit": obj.get("limit"),
            "matches": obj.get("matches"),
            "mispId": obj.get("mispId"),
            "mitreId": obj.get("mitreId"),
            "order": obj.get("order"),
            "published": obj.get("published"),
            "publishedEnd": obj.get("publishedEnd"),
            "publishedStart": obj.get("publishedStart"),
            "ransomwareFamilyName": obj.get("ransomwareFamilyName"),
            "sort": obj.get("sort"),
            "threatActorName": obj.get("threatActorName"),
            "typeId": obj.get("typeId"),
            "typeKind": obj.get("typeKind"),
            "updatedEnd": obj.get("updatedEnd"),
            "updatedStart": obj.get("updatedStart")
        })
        return _obj



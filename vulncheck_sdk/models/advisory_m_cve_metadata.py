# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryMCveMetadata(BaseModel):
    """
    AdvisoryMCveMetadata
    """ # noqa: E501
    assigner_org_id: Optional[StrictStr] = Field(default=None, alias="assignerOrgId")
    assigner_short_name: Optional[StrictStr] = Field(default=None, alias="assignerShortName")
    cve_id: Optional[StrictStr] = Field(default=None, alias="cveId")
    date_published: Optional[StrictStr] = Field(default=None, alias="datePublished")
    date_reserved: Optional[StrictStr] = Field(default=None, alias="dateReserved")
    date_updated: Optional[StrictStr] = Field(default=None, alias="dateUpdated")
    state: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["assignerOrgId", "assignerShortName", "cveId", "datePublished", "dateReserved", "dateUpdated", "state"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryMCveMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryMCveMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assignerOrgId": obj.get("assignerOrgId"),
            "assignerShortName": obj.get("assignerShortName"),
            "cveId": obj.get("cveId"),
            "datePublished": obj.get("datePublished"),
            "dateReserved": obj.get("dateReserved"),
            "dateUpdated": obj.get("dateUpdated"),
            "state": obj.get("state")
        })
        return _obj



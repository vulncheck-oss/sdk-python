# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryCVSSV2(BaseModel):
    """
    AdvisoryCVSSV2
    """ # noqa: E501
    access_complexity: Optional[StrictStr] = Field(default=None, alias="accessComplexity")
    access_vector: Optional[StrictStr] = Field(default=None, alias="accessVector")
    authentication: Optional[StrictStr] = None
    availability_impact: Optional[StrictStr] = Field(default=None, alias="availabilityImpact")
    availability_requirement: Optional[StrictStr] = Field(default=None, alias="availabilityRequirement")
    base_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="baseScore")
    collateral_damage_potential: Optional[StrictStr] = Field(default=None, alias="collateralDamagePotential")
    confidentiality_impact: Optional[StrictStr] = Field(default=None, alias="confidentialityImpact")
    confidentiality_requirement: Optional[StrictStr] = Field(default=None, alias="confidentialityRequirement")
    environmental_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="environmentalScore")
    exploitability: Optional[StrictStr] = None
    integrity_impact: Optional[StrictStr] = Field(default=None, alias="integrityImpact")
    integrity_requirement: Optional[StrictStr] = Field(default=None, alias="integrityRequirement")
    remediation_level: Optional[StrictStr] = Field(default=None, alias="remediationLevel")
    report_confidence: Optional[StrictStr] = Field(default=None, alias="reportConfidence")
    target_distribution: Optional[StrictStr] = Field(default=None, alias="targetDistribution")
    temporal_score: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="temporalScore")
    __properties: ClassVar[List[str]] = ["accessComplexity", "accessVector", "authentication", "availabilityImpact", "availabilityRequirement", "baseScore", "collateralDamagePotential", "confidentialityImpact", "confidentialityRequirement", "environmentalScore", "exploitability", "integrityImpact", "integrityRequirement", "remediationLevel", "reportConfidence", "targetDistribution", "temporalScore"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryCVSSV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryCVSSV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessComplexity": obj.get("accessComplexity"),
            "accessVector": obj.get("accessVector"),
            "authentication": obj.get("authentication"),
            "availabilityImpact": obj.get("availabilityImpact"),
            "availabilityRequirement": obj.get("availabilityRequirement"),
            "baseScore": obj.get("baseScore"),
            "collateralDamagePotential": obj.get("collateralDamagePotential"),
            "confidentialityImpact": obj.get("confidentialityImpact"),
            "confidentialityRequirement": obj.get("confidentialityRequirement"),
            "environmentalScore": obj.get("environmentalScore"),
            "exploitability": obj.get("exploitability"),
            "integrityImpact": obj.get("integrityImpact"),
            "integrityRequirement": obj.get("integrityRequirement"),
            "remediationLevel": obj.get("remediationLevel"),
            "reportConfidence": obj.get("reportConfidence"),
            "targetDistribution": obj.get("targetDistribution"),
            "temporalScore": obj.get("temporalScore")
        })
        return _obj



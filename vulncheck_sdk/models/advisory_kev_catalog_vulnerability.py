# coding: utf-8

"""
    VulnCheck API

    Version 3 of the VulnCheck API

    The version of the OpenAPI document: 3.0
    Contact: support@vulncheck.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AdvisoryKEVCatalogVulnerability(BaseModel):
    """
    AdvisoryKEVCatalogVulnerability
    """ # noqa: E501
    cve: Optional[List[StrictStr]] = None
    cwes: Optional[List[StrictStr]] = None
    date_added: Optional[StrictStr] = None
    due_date: Optional[StrictStr] = Field(default=None, alias="dueDate")
    known_ransomware_campaign_use: Optional[StrictStr] = Field(default=None, alias="knownRansomwareCampaignUse")
    notes: Optional[StrictStr] = None
    product: Optional[StrictStr] = None
    required_action: Optional[StrictStr] = Field(default=None, alias="requiredAction")
    short_description: Optional[StrictStr] = Field(default=None, alias="shortDescription")
    vendor_project: Optional[StrictStr] = Field(default=None, alias="vendorProject")
    vulnerability_name: Optional[StrictStr] = Field(default=None, alias="vulnerabilityName")
    __properties: ClassVar[List[str]] = ["cve", "cwes", "date_added", "dueDate", "knownRansomwareCampaignUse", "notes", "product", "requiredAction", "shortDescription", "vendorProject", "vulnerabilityName"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AdvisoryKEVCatalogVulnerability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AdvisoryKEVCatalogVulnerability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cve": obj.get("cve"),
            "cwes": obj.get("cwes"),
            "date_added": obj.get("date_added"),
            "dueDate": obj.get("dueDate"),
            "knownRansomwareCampaignUse": obj.get("knownRansomwareCampaignUse"),
            "notes": obj.get("notes"),
            "product": obj.get("product"),
            "requiredAction": obj.get("requiredAction"),
            "shortDescription": obj.get("shortDescription"),
            "vendorProject": obj.get("vendorProject"),
            "vulnerabilityName": obj.get("vulnerabilityName")
        })
        return _obj


